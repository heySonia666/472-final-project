# Combine the data frames first
combined_df <- bind_rows(
emembers_df %>% mutate(Group = 'emembers'),
hmembers_df %>% mutate(Group = 'hmembers')
)
# Calculate the party proportions
party_prop <- combined_df %>%
count(Party, Group) %>%
group_by(Party) %>%
mutate(Proportion = n / sum(n)) %>%
ungroup()
# Ensure Party is treated as a factor
party_prop$Party <- as.factor(party_prop$Party)
# Plotting the data with a centered title
ggplot(party_prop, aes(x = Party, y = Proportion, fill = Group)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(labels = scales::percent_format()) +
labs(title = "Party Preference in Question Asking", x = 'Party', y = 'Proportion', fill = 'Group') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5),  # Rotate x-axis labels for Party
plot.title = element_text(hjust = 0.5)) # Center the title
library(ggplot2)
library(dplyr)
library(lubridate)
# Assume emembers_df and hmembers_df are already loaded and have the appropriate columns
# Function to classify dates into two periods
classify_period <- function(date) {
if (year(date) < 2016) {
'Before 2016'
} else {
'After 2016'
}
}
# Convert membershipStartDate to Date and classify periods
emembers_df$membershipStartDate <- as.Date(emembers_df$membershipStartDate)
hmembers_df$membershipStartDate <- as.Date(hmembers_df$membershipStartDate)
emembers_df$Period <- sapply(emembers_df$membershipStartDate, classify_period)
hmembers_df$Period <- sapply(hmembers_df$membershipStartDate, classify_period)
# Filter for female members after 2016 and ensure Party is treated as a factor
emembers_female <- emembers_df %>% filter(gender == "F" & Period == 'After 2016') %>% mutate(Party = as.factor(Party))
hmembers_female <- hmembers_df %>% filter(gender == "F" & Period == 'After 2016') %>% mutate(Party = as.factor(Party))
# Count by Party for emembers and hmembers
emembers_female_counts <- emembers_female %>% count(Party)
hmembers_female_counts <- hmembers_female %>% count(Party)
# Combine the counts and calculate proportions
combined_female_counts <- full_join(emembers_female_counts, hmembers_female_counts, by = "Party", suffix = c("_emembers", "_hmembers")) %>%
mutate(Party = as.factor(Party),
emembers = n_emembers / (n_emembers + n_hmembers),
hmembers = n_hmembers / (n_emembers + n_hmembers))
# Melt the combined data for plotting with ggplot2
combined_female_melted <- reshape2::melt(combined_female_counts, id.vars = "Party", measure.vars = c("emembers", "hmembers"))
# Plot the data for females
female_plot <- ggplot(combined_female_melted, aes(x = Party, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = 'Party', y = 'Proportion', fill = 'Group',title = 'Female Members Proportion After 2016') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 10))
# Filter for male members after 2016 and ensure Party is treated as a factor
emembers_male <- emembers_df %>% filter(gender == "M" & Period == 'After 2016') %>% mutate(Party = as.factor(Party))
hmembers_male <- hmembers_df %>% filter(gender == "M" & Period == 'After 2016') %>% mutate(Party = as.factor(Party))
# Count by Party for emembers and hmembers
emembers_male_counts <- emembers_male %>% count(Party)
hmembers_male_counts <- hmembers_male %>% count(Party)
# Combine the counts and calculate proportions
combined_male_counts <- full_join(emembers_male_counts, hmembers_male_counts, by = "Party", suffix = c("_emembers", "_hmembers")) %>%
mutate(Party = as.factor(Party),
emembers = n_emembers / (n_emembers + n_hmembers),
hmembers = n_hmembers / (n_emembers + n_hmembers))
# Melt the combined data for plotting with ggplot2
combined_male_melted <- reshape2::melt(combined_male_counts, id.vars = "Party", measure.vars = c("emembers", "hmembers"))
# Plot the data for males
male_plot <- ggplot(combined_male_melted, aes(x = Party, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = 'Party', y = 'Proportion', fill = 'Group',title = 'Male Members Proportion After 2016') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 10))
# Execute the plot for males
print(male_plot)
# Filter for female members before 2016 and ensure Party is treated as a factor
emembers_female_before <- emembers_df %>% filter(gender == "F" & Period == 'Before 2016') %>% mutate(Party = as.factor(Party))
hmembers_female_before <- hmembers_df %>% filter(gender == "F" & Period == 'Before 2016') %>% mutate(Party = as.factor(Party))
# Count by Party for emembers and hmembers
emembers_female_counts_before <- emembers_female_before %>% count(Party)
hmembers_female_counts_before <- hmembers_female_before %>% count(Party)
# Combine the counts and calculate proportions
combined_female_counts_before <- full_join(emembers_female_counts_before, hmembers_female_counts_before, by = "Party", suffix = c("_emembers", "_hmembers")) %>%
mutate(Party = as.factor(Party),
emembers = n_emembers / (n_emembers + n_hmembers),
hmembers = n_hmembers / (n_emembers + n_hmembers))
# Melt the combined data for plotting with ggplot2
combined_female_melted_before <- reshape2::melt(combined_female_counts_before, id.vars = "Party", measure.vars = c("emembers", "hmembers"))
# Plot the data for females before 2016
female_plot_before <- ggplot(combined_female_melted_before, aes(x = Party, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = 'Party', y = 'Proportion', fill = 'Group', title = 'Female Members Proportion Before 2016') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 10))
# Execute the plot for females before 2016
print(female_plot_before)
# Filter for male members before 2016 and ensure Party is treated as a factor
emembers_male_before <- emembers_df %>% filter(gender == "M" & Period == 'Before 2016') %>% mutate(Party = as.factor(Party))
hmembers_male_before <- hmembers_df %>% filter(gender == "M" & Period == 'Before 2016') %>% mutate(Party = as.factor(Party))
# Count by Party for emembers and hmembers
emembers_male_counts_before <- emembers_male_before %>% count(Party)
hmembers_male_counts_before <- hmembers_male_before %>% count(Party)
# Combine the counts and calculate proportions
combined_male_counts_before <- full_join(emembers_male_counts_before, hmembers_male_counts_before, by = "Party", suffix = c("_emembers", "_hmembers")) %>%
mutate(Party = as.factor(Party),
emembers = n_emembers / (n_emembers + n_hmembers),
hmembers = n_hmembers / (n_emembers + n_hmembers))
# Melt the combined data for plotting with ggplot2
combined_male_melted_before <- reshape2::melt(combined_male_counts_before, id.vars = "Party", measure.vars = c("emembers", "hmembers"))
# Plot the data for males before 2016
male_plot_before <- ggplot(combined_male_melted_before, aes(x = Party, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = 'Party', y = 'Proportion', fill = 'Group', title = 'Male Members Proportion Before 2016') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 10))
# Execute the plot for males before 2016
print(male_plot_before)
library(patchwork)
# Combine plots
combined_plot <- (female_plot | male_plot) /
(female_plot_before | male_plot_before)
# show the combined plot
combined_plot
library(ggplot2)
library(dplyr)
library(lubridate)
# Assume emembers_df and hmembers_df are already loaded and have the appropriate columns
# Function to classify dates into two periods
classify_period <- function(date) {
if (year(date) < 2016) {
'Before 2016'
} else {
'After 2016'
}
}
# Convert membershipStartDate to Date and classify periods
emembers_df$membershipStartDate <- as.Date(emembers_df$membershipStartDate)
hmembers_df$membershipStartDate <- as.Date(hmembers_df$membershipStartDate)
emembers_df$Period <- sapply(emembers_df$membershipStartDate, classify_period)
hmembers_df$Period <- sapply(hmembers_df$membershipStartDate, classify_period)
# Filter for female members after 2016 and ensure Party is treated as a factor
emembers_female <- emembers_df %>% filter(gender == "F" & Period == 'After 2016') %>% mutate(Party = as.factor(Party))
hmembers_female <- hmembers_df %>% filter(gender == "F" & Period == 'After 2016') %>% mutate(Party = as.factor(Party))
# Count by Party for emembers and hmembers
emembers_female_counts <- emembers_female %>% count(Party)
hmembers_female_counts <- hmembers_female %>% count(Party)
# Combine the counts and calculate proportions
combined_female_counts <- full_join(emembers_female_counts, hmembers_female_counts, by = "Party", suffix = c("_emembers", "_hmembers")) %>%
mutate(Party = as.factor(Party),
emembers = n_emembers / (n_emembers + n_hmembers),
hmembers = n_hmembers / (n_emembers + n_hmembers))
# Melt the combined data for plotting with ggplot2
combined_female_melted <- reshape2::melt(combined_female_counts, id.vars = "Party", measure.vars = c("emembers", "hmembers"))
# Plot the data for females
female_plot <- ggplot(combined_female_melted, aes(x = Party, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = 'Party', y = 'Proportion', fill = 'Group',title = 'Female Members Proportion After 2016') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 10))
# Filter for male members after 2016 and ensure Party is treated as a factor
emembers_male <- emembers_df %>% filter(gender == "M" & Period == 'After 2016') %>% mutate(Party = as.factor(Party))
hmembers_male <- hmembers_df %>% filter(gender == "M" & Period == 'After 2016') %>% mutate(Party = as.factor(Party))
# Count by Party for emembers and hmembers
emembers_male_counts <- emembers_male %>% count(Party)
hmembers_male_counts <- hmembers_male %>% count(Party)
# Combine the counts and calculate proportions
combined_male_counts <- full_join(emembers_male_counts, hmembers_male_counts, by = "Party", suffix = c("_emembers", "_hmembers")) %>%
mutate(Party = as.factor(Party),
emembers = n_emembers / (n_emembers + n_hmembers),
hmembers = n_hmembers / (n_emembers + n_hmembers))
# Melt the combined data for plotting with ggplot2
combined_male_melted <- reshape2::melt(combined_male_counts, id.vars = "Party", measure.vars = c("emembers", "hmembers"))
# Plot the data for males
male_plot <- ggplot(combined_male_melted, aes(x = Party, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = 'Party', y = 'Proportion', fill = 'Group',title = 'Male Members Proportion After 2016') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 10))
# Filter for female members before 2016 and ensure Party is treated as a factor
emembers_female_before <- emembers_df %>% filter(gender == "F" & Period == 'Before 2016') %>% mutate(Party = as.factor(Party))
hmembers_female_before <- hmembers_df %>% filter(gender == "F" & Period == 'Before 2016') %>% mutate(Party = as.factor(Party))
# Count by Party for emembers and hmembers
emembers_female_counts_before <- emembers_female_before %>% count(Party)
hmembers_female_counts_before <- hmembers_female_before %>% count(Party)
# Combine the counts and calculate proportions
combined_female_counts_before <- full_join(emembers_female_counts_before, hmembers_female_counts_before, by = "Party", suffix = c("_emembers", "_hmembers")) %>%
mutate(Party = as.factor(Party),
emembers = n_emembers / (n_emembers + n_hmembers),
hmembers = n_hmembers / (n_emembers + n_hmembers))
# Melt the combined data for plotting with ggplot2
combined_female_melted_before <- reshape2::melt(combined_female_counts_before, id.vars = "Party", measure.vars = c("emembers", "hmembers"))
# Plot the data for females before 2016
female_plot_before <- ggplot(combined_female_melted_before, aes(x = Party, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = 'Party', y = 'Proportion', fill = 'Group', title = 'Female Members Proportion Before 2016') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 10))
# Filter for male members before 2016 and ensure Party is treated as a factor
emembers_male_before <- emembers_df %>% filter(gender == "M" & Period == 'Before 2016') %>% mutate(Party = as.factor(Party))
hmembers_male_before <- hmembers_df %>% filter(gender == "M" & Period == 'Before 2016') %>% mutate(Party = as.factor(Party))
# Count by Party for emembers and hmembers
emembers_male_counts_before <- emembers_male_before %>% count(Party)
hmembers_male_counts_before <- hmembers_male_before %>% count(Party)
# Combine the counts and calculate proportions
combined_male_counts_before <- full_join(emembers_male_counts_before, hmembers_male_counts_before, by = "Party", suffix = c("_emembers", "_hmembers")) %>%
mutate(Party = as.factor(Party),
emembers = n_emembers / (n_emembers + n_hmembers),
hmembers = n_hmembers / (n_emembers + n_hmembers))
# Melt the combined data for plotting with ggplot2
combined_male_melted_before <- reshape2::melt(combined_male_counts_before, id.vars = "Party", measure.vars = c("emembers", "hmembers"))
# Plot the data for males before 2016
male_plot_before <- ggplot(combined_male_melted_before, aes(x = Party, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = 'Party', y = 'Proportion', fill = 'Group', title = 'Male Members Proportion Before 2016') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 10))
library(patchwork)
# Combine plots
combined_plot <- (female_plot | male_plot) /
(female_plot_before | male_plot_before)
# show the combined plot
combined_plot
library(ggplot2)
library(dplyr)
library(lubridate)
# Convert membershipStartDate to Date format
emembers_df$membershipStartDate <- as.Date(emembers_df$membershipStartDate)
hmembers_df$membershipStartDate <- as.Date(hmembers_df$membershipStartDate)
# Extract the year from the membershipStartDate
emembers_df$Year <- year(emembers_df$membershipStartDate)
hmembers_df$Year <- year(hmembers_df$membershipStartDate)
# Combine the data frames
combined_df <- bind_rows(
emembers_df %>% mutate(Group = 'emembers'),
hmembers_df %>% mutate(Group = 'hmembers')
)
# Calculate the counts for each year and group
yearly_counts <- combined_df %>%
group_by(Year, Group) %>%
summarise(n = n(), .groups = 'drop')
# Calculate proportions for each year
yearly_counts <- yearly_counts %>%
group_by(Year) %>%
mutate(Proportion = n / sum(n)) %>%
ungroup()
# Plotting the data with a centered title
line_plot <- ggplot(yearly_counts, aes(x = Year, y = Proportion, group = Group, color = Group)) +
geom_line() +
geom_point() + # Add points to the line graph
geom_vline(xintercept = 2016, linetype = "dashed", color = "black") +
annotate("text", x = 2016, y = 0, label = "2016", vjust = 1, color = "black", angle = 0) +
scale_y_continuous(labels = scales::percent_format()) +
labs(title = "Time Period in Question Asking", x = 'Year', y = 'Proportion of Members', color = 'Group') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),  # Tilt the x-axis labels
plot.title = element_text(hjust = 0.5)) # Center the title
# Display the plot
print(line_plot)
# this chunk contains code that sets global options for the entire .Rmd.
# we use include=FALSE to suppress it from the top of the document, but it will still appear in the appendix.
knitr::opts_chunk$set(echo = FALSE) # actually set the global chunk options.
# we set echo=FALSE to suppress code such that it by default does not appear throughout the document.
# note: this is different from .Rmd default
library(ggplot2)
library(dplyr)
library(lubridate)
# Assume emembers_df and hmembers_df are already loaded and have the appropriate columns
# Function to classify dates into two periods
classify_period <- function(date) {
if (year(date) < 2016) {
'Before 2016'
} else {
'After 2016'
}
}
# Convert membershipStartDate to Date and classify periods
emembers_df$membershipStartDate <- as.Date(emembers_df$membershipStartDate)
hmembers_df$membershipStartDate <- as.Date(hmembers_df$membershipStartDate)
emembers_df$Period <- sapply(emembers_df$membershipStartDate, classify_period)
hmembers_df$Period <- sapply(hmembers_df$membershipStartDate, classify_period)
# Filter for female members after 2016 and ensure Party is treated as a factor
emembers_female <- emembers_df %>% filter(gender == "F" & Period == 'After 2016') %>% mutate(Party = as.factor(Party))
hmembers_female <- hmembers_df %>% filter(gender == "F" & Period == 'After 2016') %>% mutate(Party = as.factor(Party))
# Count by Party for emembers and hmembers
emembers_female_counts <- emembers_female %>% count(Party)
hmembers_female_counts <- hmembers_female %>% count(Party)
# Combine the counts and calculate proportions
combined_female_counts <- full_join(emembers_female_counts, hmembers_female_counts, by = "Party", suffix = c("_emembers", "_hmembers")) %>%
mutate(Party = as.factor(Party),
emembers = n_emembers / (n_emembers + n_hmembers),
hmembers = n_hmembers / (n_emembers + n_hmembers))
# Melt the combined data for plotting with ggplot2
combined_female_melted <- reshape2::melt(combined_female_counts, id.vars = "Party", measure.vars = c("emembers", "hmembers"))
# Plot the data for females
female_plot <- ggplot(combined_female_melted, aes(x = Party, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = 'Party', y = 'Proportion', fill = 'Group',title = 'Female Members Proportion After 2016') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 10))
# Filter for male members after 2016 and ensure Party is treated as a factor
emembers_male <- emembers_df %>% filter(gender == "M" & Period == 'After 2016') %>% mutate(Party = as.factor(Party))
hmembers_male <- hmembers_df %>% filter(gender == "M" & Period == 'After 2016') %>% mutate(Party = as.factor(Party))
# Count by Party for emembers and hmembers
emembers_male_counts <- emembers_male %>% count(Party)
hmembers_male_counts <- hmembers_male %>% count(Party)
# Combine the counts and calculate proportions
combined_male_counts <- full_join(emembers_male_counts, hmembers_male_counts, by = "Party", suffix = c("_emembers", "_hmembers")) %>%
mutate(Party = as.factor(Party),
emembers = n_emembers / (n_emembers + n_hmembers),
hmembers = n_hmembers / (n_emembers + n_hmembers))
# Melt the combined data for plotting with ggplot2
combined_male_melted <- reshape2::melt(combined_male_counts, id.vars = "Party", measure.vars = c("emembers", "hmembers"))
# Plot the data for males
male_plot <- ggplot(combined_male_melted, aes(x = Party, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = 'Party', y = 'Proportion', fill = 'Group',title = 'Male Members Proportion After 2016') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 10))
# Filter for female members before 2016 and ensure Party is treated as a factor
emembers_female_before <- emembers_df %>% filter(gender == "F" & Period == 'Before 2016') %>% mutate(Party = as.factor(Party))
hmembers_female_before <- hmembers_df %>% filter(gender == "F" & Period == 'Before 2016') %>% mutate(Party = as.factor(Party))
# Count by Party for emembers and hmembers
emembers_female_counts_before <- emembers_female_before %>% count(Party)
hmembers_female_counts_before <- hmembers_female_before %>% count(Party)
# Combine the counts and calculate proportions
combined_female_counts_before <- full_join(emembers_female_counts_before, hmembers_female_counts_before, by = "Party", suffix = c("_emembers", "_hmembers")) %>%
mutate(Party = as.factor(Party),
emembers = n_emembers / (n_emembers + n_hmembers),
hmembers = n_hmembers / (n_emembers + n_hmembers))
# Melt the combined data for plotting with ggplot2
combined_female_melted_before <- reshape2::melt(combined_female_counts_before, id.vars = "Party", measure.vars = c("emembers", "hmembers"))
# Plot the data for females before 2016
female_plot_before <- ggplot(combined_female_melted_before, aes(x = Party, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = 'Party', y = 'Proportion', fill = 'Group', title = 'Female Members Proportion Before 2016') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 10))
# Filter for male members before 2016 and ensure Party is treated as a factor
emembers_male_before <- emembers_df %>% filter(gender == "M" & Period == 'Before 2016') %>% mutate(Party = as.factor(Party))
hmembers_male_before <- hmembers_df %>% filter(gender == "M" & Period == 'Before 2016') %>% mutate(Party = as.factor(Party))
# Count by Party for emembers and hmembers
emembers_male_counts_before <- emembers_male_before %>% count(Party)
hmembers_male_counts_before <- hmembers_male_before %>% count(Party)
# Combine the counts and calculate proportions
combined_male_counts_before <- full_join(emembers_male_counts_before, hmembers_male_counts_before, by = "Party", suffix = c("_emembers", "_hmembers")) %>%
mutate(Party = as.factor(Party),
emembers = n_emembers / (n_emembers + n_hmembers),
hmembers = n_hmembers / (n_emembers + n_hmembers))
# Melt the combined data for plotting with ggplot2
combined_male_melted_before <- reshape2::melt(combined_male_counts_before, id.vars = "Party", measure.vars = c("emembers", "hmembers"))
# Plot the data for males before 2016
male_plot_before <- ggplot(combined_male_melted_before, aes(x = Party, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = 'Party', y = 'Proportion', fill = 'Group', title = 'Male Members Proportion Before 2016') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 10))
library(patchwork)
# Combine plots
combined_plot <- (female_plot | male_plot) /
(female_plot_before | male_plot_before)
# show the combined plot
combined_plot
# this chunk contains code that sets global options for the entire .Rmd.
# we use include=FALSE to suppress it from the top of the document, but it will still appear in the appendix.
knitr::opts_chunk$set(echo = FALSE) # actually set the global chunk options.
# we set echo=FALSE to suppress code such that it by default does not appear throughout the document.
# note: this is different from .Rmd default
library(httr)
library(jsonlite)
library(dplyr)
# Function to get data from an API endpoint
get_data_from_api <- function(url) {
response <- GET(url)
if (status_code(response) == 200) {
data <- content(response, "text")
return(fromJSON(data))
} else {
print(paste("Failed to get data from", url))
return(NULL)
}
}
# API endpoints
# The following institutions are selected as sources of acquisition：Department for Business(201), Energy and Industrial Strategy(202), Department for International Trade(214), Department for Business and Trade, Department for Business(26), Innovation and Skills,Department of Health and Social Care(17), Department for Work and Pensions(29)
written_h_url1 <- "https://questions-statements-api.parliament.uk/api/writtenquestions/questions?answeringBodies=17&house=Commons&take=5000"
written_h_url2 <- "https://questions-statements-api.parliament.uk/api/writtenquestions/questions?answeringBodies=29&house=Commons&take=5000"
written_e_url1 <- "https://questions-statements-api.parliament.uk/api/writtenquestions/questions?answeringBodies=201&house=Commons&take=5000"
written_e_url2 <- "https://questions-statements-api.parliament.uk/api/writtenquestions/questions?answeringBodies=202&house=Commons&take=5000"
written_e_url3 <- "https://questions-statements-api.parliament.uk/api/writtenquestions/questions?answeringBodies=214&house=Commons&take=5000"
written_e_url4 <- "https://questions-statements-api.parliament.uk/api/writtenquestions/questions?answeringBodies=26&house=Commons&take=5000"
# Fetch data
written_e_data1 <- get_data_from_api(written_e_url1)
written_e_data2 <- get_data_from_api(written_e_url2)
written_e_data3 <- get_data_from_api(written_e_url3)
written_e_data4 <- get_data_from_api(written_e_url4)
combined_written_e_data <- rbind(written_e_data1, written_e_data2,written_e_data3,written_e_data4)
written_h_data1 <- get_data_from_api(written_h_url1)
written_h_data2 <- get_data_from_api(written_h_url2)
combined_written_h_data <- rbind(written_h_data1, written_h_data2)
# API endpoints
oral_h_url1 <- "https://oralquestionsandmotions-api.parliament.uk/oralquestions/list?parameters.answeringBodyIds=17&parameters.take=100"
oral_h_url2 <- "https://oralquestionsandmotions-api.parliament.uk/oralquestions/list?parameters.answeringBodyIds=29&parameters.take=100"
oral_e_url1 <- "https://oralquestionsandmotions-api.parliament.uk/oralquestions/list?parameters.answeringBodyIds=201&parameters.take=100"
oral_e_url2 <- "https://oralquestionsandmotions-api.parliament.uk/oralquestions/list?parameters.answeringBodyIds=202&parameters.take=100"
oral_e_url3 <- "https://oralquestionsandmotions-api.parliament.uk/oralquestions/list?parameters.answeringBodyIds=214&parameters.take=100"
oral_e_url4 <- "https://oralquestionsandmotions-api.parliament.uk/oralquestions/list?parameters.answeringBodyIds=26&parameters.take=100"
# Function to fetch data from a given URL
fetch_data <- function(url, max_records = 5000) {
records <- list()
page_size <- 100
current_offset <- 0
while (length(records) < max_records) {
response <- GET(paste0(url, "&parameters.offset=", current_offset))
if (status_code(response) == 200) {
data <- fromJSON(content(response, "text"), flatten = TRUE)
records <- c(records, data)
current_offset <- current_offset + page_size
} else {
break # Stop if there's an error or no more data
}
if (length(data) < page_size) { # Break the loop if last page has less than page_size records
break
}
}
return(records[1:min(max_records, length(records))])
}
# URLs
oral_h_url1 <- "https://oralquestionsandmotions-api.parliament.uk/oralquestions/list?parameters.answeringBodyIds=17&parameters.take=100"
oral_h_url2 <- "https://oralquestionsandmotions-api.parliament.uk/oralquestions/list?parameters.answeringBodyIds=29&parameters.take=100"
oral_e_url1 <- "https://oralquestionsandmotions-api.parliament.uk/oralquestions/list?parameters.answeringBodyIds=201&parameters.take=100"
oral_e_url2 <- "https://oralquestionsandmotions-api.parliament.uk/oralquestions/list?parameters.answeringBodyIds=202&parameters.take=100"
oral_e_url3 <- "https://oralquestionsandmotions-api.parliament.uk/oralquestions/list?parameters.answeringBodyIds=214&parameters.take=100"
oral_e_url4 <- "https://oralquestionsandmotions-api.parliament.uk/oralquestions/list?parameters.answeringBodyIds=26&parameters.take=100"
# Fetching data from each URL
oral_h_data1 <- fetch_data(oral_h_url1)
oral_h_data2 <- fetch_data(oral_h_url2)
combined_oral_h_data <- rbind(oral_h_data1, oral_h_data2)
oral_e_data1 <- fetch_data(oral_e_url1)
oral_e_data2 <- fetch_data(oral_e_url2)
oral_e_data3 <- fetch_data(oral_e_url3)
oral_e_data4 <- fetch_data(oral_e_url4)
combined_oral_e_data <- rbind(oral_e_data1, oral_e_data2,oral_e_data3,oral_e_data4)
eids1 <- combined_oral_e_data[[17]]$AskingMemberId
eids2 <- combined_oral_e_data[[18]]$AskingMemberId
eids3 <- combined_oral_e_data[[19]]$AskingMemberId
eids4 <- combined_written_e_data[5][[1]]$value$askingMemberId
eids5 <- combined_written_e_data[6][[1]]$value$askingMemberId
eids6 <- combined_written_e_data[7][[1]]$value$askingMemberId
eids7 <- combined_written_e_data[8][[1]]$value$askingMemberId
eidall <- c(eids1,eids2,eids3,eids4,eids5,eids6,eids7)
hids1 <- combined_oral_h_data[[9]]$AskingMemberId
hids2 <- combined_oral_h_data[[10]]$AskingMemberId
hids3 <- combined_written_h_data[3][[1]]$value$askingMemberId
hids4 <- combined_written_h_data[4][[1]]$value$askingMemberId
hidall <- c(hids1,hids2,hids3,hids4)
# Use the unique function to remove duplicates
unique_eidall <- unique(eidall)
unique_hidall <- unique(hidall)
library(pbapply)
library(tidyr)
library(purrr)
library(tibble)
library(httr)
library(jsonlite)
get_member_data <- function(ids) {
base_url <- "https://members-api.parliament.uk/api/Members/"
# Use pblapply instead of the for loop and add a progress bar
results <- pblapply(ids, function(id) {
# Build the full API URL
url <- paste0(base_url, id)
# Executing API requests
response <- GET(url)
if (status_code(response) == 200) {
# Parse the JSON response and return the data
data <- fromJSON(content(response, "text"), flatten = TRUE)
return(data$value)
} else {
warning(paste("Failed to retrieve data for ID:", id))
return(NULL)
}
})
# Removes the NULL value from the list
results <- Filter(Negate(is.null), results)
return(results)
}
emember_data <- get_member_data(unique_eidall)
